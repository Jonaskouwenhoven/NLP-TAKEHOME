import os

def clear_error_files(model_names):
    for model_name in model_names:
        error_file = f"{model_name}_failures.txt"
        success_file = f"{model_name}_success.txt"

        if os.path.exists(error_file):
            os.remove(error_file)

        if os.path.exists(success_file):
            os.remove(success_file)

        with open(error_file, "w") as f:
            f.write("")

        with open(success_file, "w") as f:
            f.write("")

def log_success(model_name, output, golden_label, sentence, log_file=None):
    """
    Write a success statement to a txt file.
    
    Args:
        model_name (str): The name of the model used.
        output (str): The output generated by the model.
        golden_label (str): The expected output or the correct label.
        sentence (str): The input sentence that was provided to the model.
        log_file (str, optional): The name of the log file. Defaults to None.
    """
    if log_file is None:
        log_file = f"{model_name}_success.txt"
    
    with open(log_file, "a") as file:
        file.write(f"\nSuccess: Correctly identified predicate in sentence '{sentence}'. ")
        file.write(f"Gold Data: '{golden_label}'. ")
        file.write(f"Predicted label: '{output}'.\n")
        file.write("-"*40+"\n")



def log_error(model_name, output, golden_label, sentence, error_type, log_file=None):
    """
    Write an error statement to a txt file.
    
    Args:
        model_name (str): The name of the model used.
        output (str): The output generated by the model.
        golden_label (str): The expected output or the correct label.
        sentence (str): The input sentence that was provided to the model.
        error_type (str): The type of error encountered (e.g., 'patient' or 'agent').
        log_file (str, optional): The name of the log file. Defaults to None.
    """
    if log_file is None:
        log_file = f"{model_name}_failures.txt"
    
    with open(log_file, "a") as file:
        file.write(f"\nError: Failed to correctly identify {error_type} in sentence '{sentence}'. ")
        file.write(f"Gold Data: '{golden_label}'. ")
        file.write(f"Predicted label: '{output}'.\n")
        file.write("-"*40+"\n")



def start_message(models, test_type):

    for model in models:
        with open(f"{model}_failures.txt", "a") as f:
            f.write(f"\nStarting new test: {test_type}\n")
        with open(f"{model}_success.txt", "a") as f:
            f.write(f"\nStarting new test: {test_type}\n")
